package xyz.hyperreal.rosettacodeCompiler

import utest._

object SampleProgramInterpreterTests extends TestSuite {

  import Testing._

  val tests = Tests {
    test("hello world") {
      assert(
        runUsingInterpreter(
          """
            |/*
            |  Hello world
            | */
            |print("Hello, World!\n");
            |""".stripMargin
        ) ==
          """
            |Hello, World!
            |""".trim.stripMargin
      )
    }

    test("phoenix number") {
      assert(
        runUsingInterpreter(
          """
            |/*
            |  Show Ident and Integers
            | */
            |phoenix_number = 142857;
            |print(phoenix_number, "\n");
            |""".stripMargin
        ) ==
          """
            |142857
            |""".trim.stripMargin
      )
    }

    test("test case 4") {
      assert(
        runUsingInterpreter(
          """
            |/*** test printing, embedded \n and comments with lots of '*' ***/
            |print(42);
            |print("\nHello World\nGood Bye\nok\n");
            |print("Print a slash n - \\n.\n");
            |""".stripMargin
        ) ==
          """
            |42
            |Hello World
            |Good Bye
            |ok
            |Print a slash n - \n.
            |""".trim.stripMargin
      )
    }

    test("count") {
      assert(
        runUsingInterpreter(
          """
            |count = 1;
            |while (count < 10) {
            |    print("count is: ", count, "\n");
            |    count = count + 1;
            |}
            |""".stripMargin
        ) ==
          """
            |count is: 1
            |count is: 2
            |count is: 3
            |count is: 4
            |count is: 5
            |count is: 6
            |count is: 7
            |count is: 8
            |count is: 9
            |""".trim.stripMargin
      )
    }

    test("100 doors") {
      assert(
        runUsingInterpreter(
          """
            |/* 100 Doors */
            |i = 1;
            |while (i * i <= 100) {
            |    print("door ", i * i, " is open\n");
            |    i = i + 1;
            |}
            |""".stripMargin
        ) ==
          """
            |door 1 is open
            |door 4 is open
            |door 9 is open
            |door 16 is open
            |door 25 is open
            |door 36 is open
            |door 49 is open
            |door 64 is open
            |door 81 is open
            |door 100 is open
            |""".trim.stripMargin
      )
    }

    test("negative tests") {
      assert(
        runUsingInterpreter(
          """
            |a = (-1 * ((-1 * (5 * 15)) / 10));
            |print(a, "\n");
            |b = -a;
            |print(b, "\n");
            |print(-b, "\n");
            |print(-(1), "\n");
            |""".stripMargin
        ) ==
          """
            |7
            |-7
            |7
            |-1
            |""".trim.stripMargin
      )
    }

    test("deep") {
      assert(
        runUsingInterpreter(
          """
            |print(---------------------------------+++5, "\n");
            |print(((((((((3 + 2) * ((((((2))))))))))))), "\n");
            |
            |if (1) { if (1) { if (1) { if (1) { if (1) { print(15, "\n"); } } } } }
            |""".stripMargin
        ) ==
          """
            |-5
            |10
            |15
            |""".trim.stripMargin
      )
    }

    test("gcd") {
      assert(
        runUsingInterpreter(
          """
            |/* Compute the gcd of 1071, 1029:  21 */
            |
            |a = 1071;
            |b = 1029;
            |
            |while (b != 0) {
            |    new_a = b;
            |    b     = a % b;
            |    a     = new_a;
            |}
            |print(a);
            |""".stripMargin
        ) == "21"
      )
    }

    test("factorial") {
      assert(
        runUsingInterpreter(
          """
            |/* 12 factorial is 479001600 */
            |
            |n = 12;
            |result = 1;
            |i = 1;
            |while (i <= n) {
            |    result = result * i;
            |    i = i + 1;
            |}
            |print(result);
            |""".stripMargin
        ) == "479001600"
      )
    }

    test("factorial") {
      assert(
        runUsingInterpreter(
          """
            |/* fibonacci of 44 is 701408733 */
            |
            |n = 44;
            |i = 1;
            |a = 0;
            |b = 1;
            |while (i < n) {
            |    w = a + b;
            |    a = b;
            |    b = w;
            |    i = i + 1;
            |}
            |print(w, "\n");
            |""".stripMargin
        ) == "701408733\n"
      )
    }

    test("primes") {
      assert(
        runUsingInterpreter("""
                              |/*
                              | Simple prime number generator
                              | */
                              |count = 1;
                              |n = 1;
                              |limit = 100;
                              |while (n < limit) {
                              |    k=3;
                              |    p=1;
                              |    n=n+2;
                              |    while ((k*k<=n) && (p)) {
                              |        p=n/k*k!=n;
                              |        k=k+2;
                              |    }
                              |    if (p) {
                              |        print(n, " is prime\n");
                              |        count = count + 1;
                              |    }
                              |}
                              |print("Total primes found: ", count, "\n");
                              |""".stripMargin) ==
          """
            |3 is prime
            |5 is prime
            |7 is prime
            |11 is prime
            |13 is prime
            |17 is prime
            |19 is prime
            |23 is prime
            |29 is prime
            |31 is prime
            |37 is prime
            |41 is prime
            |43 is prime
            |47 is prime
            |53 is prime
            |59 is prime
            |61 is prime
            |67 is prime
            |71 is prime
            |73 is prime
            |79 is prime
            |83 is prime
            |89 is prime
            |97 is prime
            |101 is prime
            |Total primes found: 26
            |""".trim.stripMargin)
    }

    test("ascii Mandelbrot generator") {
      assert(
        runUsingInterpreter("""
                              |{
                              |/*
                              | This is an integer ascii Mandelbrot generator
                              | */
                              |    left_edge   = -420;
                              |    right_edge  =  300;
                              |    top_edge    =  300;
                              |    bottom_edge = -300;
                              |    x_step      =    7;
                              |    y_step      =   15;
                              |
                              |    max_iter    =  200;
                              |
                              |    y0 = top_edge;
                              |    while (y0 > bottom_edge) {
                              |        x0 = left_edge;
                              |        while (x0 < right_edge) {
                              |            y = 0;
                              |            x = 0;
                              |            the_char = ' ';
                              |            i = 0;
                              |            while (i < max_iter) {
                              |                x_x = (x * x) / 200;
                              |                y_y = (y * y) / 200;
                              |                if (x_x + y_y > 800 ) {
                              |                    the_char = '0' + i;
                              |                    if (i > 9) {
                              |                        the_char = '@';
                              |                    }
                              |                    i = max_iter;
                              |                }
                              |                y = x * y / 100 + y0;
                              |                x = x_x - y_y + x0;
                              |                i = i + 1;
                              |            }
                              |            putc(the_char);
                              |            x0 = x0 + x_step;
                              |        }
                              |        putc('\n');
                              |        y0 = y0 - y_step;
                              |    }
                              |}
                              |""".stripMargin) ==
          """
            |1111111111111111111111122222222222222222222222222222222222222222222222222222222222222222222222222211111
            |1111111111111111111122222222222222222222222222222222222222222222222222222222222222222222222222222222211
            |1111111111111111112222222222222222222222222222222222222222222222222222222222222222222222222222222222222
            |1111111111111111222222222222222222233333333333333333333333222222222222222222222222222222222222222222222
            |1111111111111112222222222222333333333333333333333333333333333333222222222222222222222222222222222222222
            |1111111111111222222222233333333333333333333333344444456655544443333332222222222222222222222222222222222
            |1111111111112222222233333333333333333333333444444445567@@6665444444333333222222222222222222222222222222
            |11111111111222222333333333333333333333334444444445555679@@@@7654444443333333222222222222222222222222222
            |1111111112222223333333333333333333333444444444455556789@@@@98755544444433333332222222222222222222222222
            |1111111122223333333333333333333333344444444445556668@@@    @@@76555544444333333322222222222222222222222
            |1111111222233333333333333333333344444444455566667778@@      @987666555544433333333222222222222222222222
            |111111122333333333333333333333444444455556@@@@@99@@@@@@    @@@@@@877779@5443333333322222222222222222222
            |1111112233333333333333333334444455555556679@   @@@               @@@@@@ 8544333333333222222222222222222
            |1111122333333333333333334445555555556666789@@@                        @86554433333333322222222222222222
            |1111123333333333333444456666555556666778@@ @                         @@87655443333333332222222222222222
            |111123333333344444455568@887789@8777788@@@                            @@@@65444333333332222222222222222
            |111133334444444455555668@@@@@@@@@@@@99@@@                              @@765444333333333222222222222222
            |111133444444445555556778@@@         @@@@                                @855444333333333222222222222222
            |11124444444455555668@99@@             @                                 @655444433333333322222222222222
            |11134555556666677789@@                                                @86655444433333333322222222222222
            |111                                                                 @@876555444433333333322222222222222
            |11134555556666677789@@                                                @86655444433333333322222222222222
            |11124444444455555668@99@@             @                                 @655444433333333322222222222222
            |111133444444445555556778@@@         @@@@                                @855444333333333222222222222222
            |111133334444444455555668@@@@@@@@@@@@99@@@                              @@765444333333333222222222222222
            |111123333333344444455568@887789@8777788@@@                            @@@@65444333333332222222222222222
            |1111123333333333333444456666555556666778@@ @                         @@87655443333333332222222222222222
            |1111122333333333333333334445555555556666789@@@                        @86554433333333322222222222222222
            |1111112233333333333333333334444455555556679@   @@@               @@@@@@ 8544333333333222222222222222222
            |111111122333333333333333333333444444455556@@@@@99@@@@@@    @@@@@@877779@5443333333322222222222222222222
            |1111111222233333333333333333333344444444455566667778@@      @987666555544433333333222222222222222222222
            |1111111122223333333333333333333333344444444445556668@@@    @@@76555544444333333322222222222222222222222
            |1111111112222223333333333333333333333444444444455556789@@@@98755544444433333332222222222222222222222222
            |11111111111222222333333333333333333333334444444445555679@@@@7654444443333333222222222222222222222222222
            |1111111111112222222233333333333333333333333444444445567@@6665444444333333222222222222222222222222222222
            |1111111111111222222222233333333333333333333333344444456655544443333332222222222222222222222222222222222
            |1111111111111112222222222222333333333333333333333333333333333333222222222222222222222222222222222222222
            |1111111111111111222222222222222222233333333333333333333333222222222222222222222222222222222222222222222
            |1111111111111111112222222222222222222222222222222222222222222222222222222222222222222222222222222222222
            |1111111111111111111122222222222222222222222222222222222222222222222222222222222222222222222222222222211
            |""".trim.stripMargin)
    }
  }
}
